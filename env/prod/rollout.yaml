apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  # annotations:
  #   argocd.argoproj.io/sync-wave: '2'
  #   argocd.argoproj.io/tracking-id: 'kd-prod-mac1:apps/Deployment:kd-prod/prod-kubernetes-dashboard'
  # labels:
  #   app.kubernetes.io/component: kubernetes-dashboard
  #   app.kubernetes.io/instance: prod
  #   app.kubernetes.io/managed-by: Helm
  #   app.kubernetes.io/name: kubernetes-dashboard
  #   app.kubernetes.io/version: v2.7.0
  #   helm.sh/chart: kubernetes-dashboard-6.0.7
  name: prod-kubernetes-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: kubernetes-dashboard
      app.kubernetes.io/instance: prod
      app.kubernetes.io/name: kubernetes-dashboard
  # strategy:
  #   rollingUpdate:
  #     maxSurge: 0
  #     maxUnavailable: 1
  #   type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kubernetes-dashboard
        app.kubernetes.io/instance: prod
        # app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubernetes-dashboard
        app.kubernetes.io/version: v2.7.0
        # helm.sh/chart: kubernetes-dashboard-6.0.7
    spec:
      containers:
        - args:
            - '--namespace=kd-prod'
            - '--auto-generate-certificates'
            - '--metrics-provider=none'
            - '--enable-skip-login'
            - '--enable-insecure-login'
            - '--namespace=kd-prod'
          image: 'kubernetesui/dashboard:v2.7.0'
          # image: 'kubernetesui/dashboard:v2.6.1'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
            - containerPort: 8443
              name: https
              protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          volumeMounts:
            - mountPath: /certs
              name: kubernetes-dashboard-certs
            - mountPath: /tmp
              name: tmp-volume
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prod-kubernetes-dashboard
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: prod-kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  strategy:
    canary:
      canaryService: preview-kubernetes-dashboard
      steps:
      - setWeight: 50
      - pause: {}
---
apiVersion: v1
kind: Service
metadata:
  # annotations:
  #   argocd.argoproj.io/sync-wave: '2'
  #   argocd.argoproj.io/tracking-id: 'kd-prod-mac1:/Service:kd-prod/prod-kubernetes-dashboard'
  # labels:
  #   app.kubernetes.io/component: kubernetes-dashboard
  #   app.kubernetes.io/instance: prod
  #   app.kubernetes.io/managed-by: Helm
  #   app.kubernetes.io/name: kubernetes-dashboard
  #   app.kubernetes.io/version: v2.7.0
  #   helm.sh/chart: kubernetes-dashboard-6.0.7
  #   kubernetes.io/cluster-service: 'true'
  name: preview-kubernetes-dashboard
  # namespace: kd-prod
spec:
  ports:
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/component: kubernetes-dashboard
    app.kubernetes.io/instance: prod
    app.kubernetes.io/name: kubernetes-dashboard
  type: ClusterIP